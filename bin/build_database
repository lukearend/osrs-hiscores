#!/usr/bin/env python3
import argparse
import sys

from src.common import PlayerData, playerdata_to_mongodoc, connect_mongo
from tqdm import tqdm

from src.common import line_count, load_clusterids_data, load_stats_data

desc = """Build a database of mappings from usernames to cluster ID. The
       database is called 'osrs-hiscores' and is built in the Mongo instance
       at the URL specified by environment variable OSRS_MONGO_URI."""

parser = argparse.ArgumentParser(description=desc)
parser.add_argument('stats_file', metavar='statsfile', type=str,
                    help="load player stats from this CSV file")
parser.add_argument('clusters_file', metavar='clustersfile', type=str,
                    help="load player cluster IDs from this CSV file")
parser.add_argument('coll_name', metavar='collection', type=str,
                    help="name of collection to populate")
parser.add_argument('-u', '--url', dest='url', type=str,
                    help="use Mongo instance running at this URL")
parser.add_argument('-d', '--drop', dest='drop', action='store_true',
                    help="if set, will drop collection before writing (default is unset)")
args = parser.parse_args()

print("connecting...", end=' ', flush=True)
db = connect_mongo(args.url if args.url else "localhost:27017")
collection = db[args.coll_name]
print("ok")

nplayers = line_count(args.stats_file) - 1
ndocs = collection.count_documents({})
if not args.drop:
    if ndocs == nplayers:
        print("database already populated, nothing to do")
        sys.exit(0)
    if ndocs > 0:
        yesno = input("database partially populated. overwrite? [y/n] ")
        if yesno.lower() != 'y':
            print("database not modified, exiting")
            sys.exit(0)

_, splits, clusterids = load_clusterids_data(args.clusters_file)
usernames, skills, stats = load_stats_data(args.stats_file, include_total=True)

if ndocs > 0:
    collection.drop()
    print("dropped existing collection")

print("writing records...")
batch_size = 4096
batch = []
for i, username in enumerate(tqdm(usernames)):
    player_stats = [int(v) for v in stats[i, :]]
    ids_per_split = {split: int(clusterids[i, j]) for j, split in enumerate(splits)}
    playerdata = PlayerData(
        username=username,
        clusterids=ids_per_split,
        stats=player_stats
    )
    doc = playerdata_to_mongodoc(playerdata)
    batch.append(doc)
    if len(batch) == batch_size:
        collection.insert_many(batch)
        batch = []
if batch:
    collection.insert_many(batch)
